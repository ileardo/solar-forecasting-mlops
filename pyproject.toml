[build-system]
requires = ["setuptools>=65.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "solar-forecasting-mlops"
version = "0.1.0"
description = "Solar Power Generation Forecasting with MLOps Pipeline"
authors = [
    {name = "Leonardo Guiducci"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.9"
keywords = ["mlops", "solar", "forecasting", "machine-learning", "time-series"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

[project.urls]
Homepage = "https://github.com/your-org/solar-forecasting-mlops"
Repository = "https://github.com/your-org/solar-forecasting-mlops"
Documentation = "https://your-org.github.io/solar-forecasting-mlops"
Issues = "https://github.com/your-org/solar-forecasting-mlops/issues"

# Black Configuration
[tool.black]
line-length = 88
target-version = ["py39", "py310", "py311"]
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.mypy_cache
  | \.pytest_cache
  | \.venv
  | venv
  | \.env
  | _build
  | buck-out
  | build
  | dist
  | __pycache__
)/
'''

# isort Configuration
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
split_on_trailing_comma = true
known_first_party = ["src"]
known_third_party = [
    "pandas",
    "numpy",
    "scikit-learn",
    "mlflow",
    "prefect",
    "evidently",
    "psycopg2",
    "sqlalchemy",
    "boto3",
    "fastapi",
    "pydantic",
    "pytest",
    "matplotlib",
    "seaborn",
    "plotly"
]
sections = [
    "FUTURE",
    "STDLIB",
    "THIRDPARTY",
    "FIRSTPARTY",
    "LOCALFOLDER"
]

# Pylint Configuration
[tool.pylint.main]
load-plugins = [
    "pylint.extensions.docparams",
    "pylint.extensions.docstyle",
    "pylint.extensions.mccabe"
]
py-version = "3.9"
source-roots = ["src"]

[tool.pylint.messages_control]
disable = [
    "too-few-public-methods",
    "too-many-arguments",
    "too-many-locals",
    "too-many-branches",
    "too-many-statements",
    "duplicate-code",
    "fixme",
    "missing-module-docstring"  # We use class/function docstrings primarily
]
enable = [
    "useless-suppression",
    "deprecated-pragma",
    "use-symbolic-message-instead"
]

[tool.pylint.format]
max-line-length = 88
max-module-lines = 1000

[tool.pylint.basic]
good-names = [
    "i", "j", "k", "ex", "Run", "_",
    "x", "y", "z", "df", "dt", "id",
    "lr", "rf", "cv", "ax", "fig"
]
bad-names = ["foo", "bar", "baz", "toto", "tutu", "tata"]

[tool.pylint.design]
max-args = 8
max-locals = 20
max-returns = 6
max-branches = 15
max-statements = 60
max-parents = 10
max-attributes = 12
min-public-methods = 1
max-public-methods = 25

[tool.pylint.similarities]
min-similarity-lines = 6
ignore-comments = true
ignore-docstrings = true
ignore-imports = true

[tool.pylint.typecheck]
ignored-modules = ["mlflow", "evidently", "prefect"]
ignored-classes = ["optparse.Values", "thread._local", "_thread._local"]

# MyPy Configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "mlflow.*",
    "prefect.*",
    "evidently.*",
    "psycopg2.*",
    "boto3.*",
    "plotly.*",
    "seaborn.*"
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ["tests.*"]
disallow_untyped_defs = false
disallow_incomplete_defs = false

# Pytest Configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=80"
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow running tests",
    "gpu: Tests requiring GPU",
    "external: Tests requiring external services"
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning"
]

# Coverage Configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*"
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]
show_missing = true
precision = 2
fail_under = 80

[tool.coverage.html]
directory = "htmlcov"

# Bandit Security Linting
[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101"]  # Skip assert_used test

# Flake8 Configuration (if used alongside pylint)
[tool.flake8]
max-line-length = 88
extend-ignore = [
    "E203",  # Whitespace before ':' (conflicts with black)
    "E501",  # Line too long (handled by black)
    "W503"   # Line break before binary operator (conflicts with black)
]
exclude = [
    ".git",
    "__pycache__",
    ".pytest_cache",
    ".mypy_cache",
    "venv",
    ".venv",
    "build",
    "dist"
]
per-file-ignores = [
    "__init__.py:F401",  # Allow unused imports in __init__ files
    "tests/*:S101"       # Allow asserts in tests
]
